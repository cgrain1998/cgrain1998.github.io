<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ray 的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-03T08:32:54.346Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Ray</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python_Scrapy_框架学习</title>
    <link href="http://example.com/2022/07/03/Python-Scrapy-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/07/03/Python-Scrapy-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-03T02:44:21.000Z</published>
    <updated>2022-07-03T08:32:54.346Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h4><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703110812.png" alt="20220703110812"></p><h4 id="2-学习目标"><a href="#2-学习目标" class="headerlink" title="2 学习目标"></a>2 学习目标</h4><ol><li><code>Scrapy</code> 框架安装</li><li>创建 <code>Scrapy </code> 项目</li><li>创建 <code>Scrapy </code> 爬虫</li><li>应用运行 <code>Scrapy </code></li><li>掌握<code>Scrapy </code> 定位以及提取方法</li><li>掌握<code>Response </code> 响应对象的常用属性</li></ol><h5 id="2-1-Scrapy-框架安装"><a href="#2-1-Scrapy-框架安装" class="headerlink" title="2.1   Scrapy 框架安装"></a>2.1   <code>Scrapy</code> 框架安装</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.doubanio.com<span class="hljs-regexp">/simple/</span> scrapy<br></code></pre></td></tr></table></figure><h5 id="2-2-Scrapy-项目创建"><a href="#2-2-Scrapy-项目创建" class="headerlink" title="2.2   Scrapy 项目创建"></a>2.2   <code>Scrapy</code> 项目创建</h5><p>我们先查看一下命令</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">E:\python学习\myScrapyProject\myScrapyProject&gt;scrapy <span class="hljs-comment">--help</span><br>Scrapy <span class="hljs-number">2.6</span><span class="hljs-number">.1</span> - project: myScrapyProject<br><br>Usage:<br>  scrapy &lt;<span class="hljs-keyword">command</span>&gt; [<span class="hljs-title">options</span>] [<span class="hljs-title">args</span>]<br><br>Available commands:<br>  bench         Run quick benchmark test<br>  check         Check spider contracts<br>  commands<br>  crawl         Run <span class="hljs-keyword">a</span> spider<br>  edit          Edit spider<br>  fetch         Fetch <span class="hljs-keyword">a</span> <span class="hljs-built_in">URL</span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">the</span> Scrapy downloader<br>  genspider     Generate <span class="hljs-built_in">new</span> spider <span class="hljs-keyword">using</span> pre-defined templates<br>  list          List available spiders<br>  parse         Parse <span class="hljs-built_in">URL</span> (<span class="hljs-keyword">using</span> its spider) <span class="hljs-keyword">and</span> print <span class="hljs-keyword">the</span> results<br>  runspider     Run <span class="hljs-keyword">a</span> self-contained spider (<span class="hljs-keyword">without</span> creating <span class="hljs-keyword">a</span> project)<br>  settings      Get settings values<br>  <span class="hljs-built_in">shell</span>         Interactive scraping console<br>  startproject  Create <span class="hljs-built_in">new</span> project<br>  <span class="hljs-built_in">version</span>       Print Scrapy <span class="hljs-built_in">version</span><br>  view          Open <span class="hljs-built_in">URL</span> <span class="hljs-keyword">in</span> browser, <span class="hljs-keyword">as</span> seen <span class="hljs-keyword">by</span> Scrapy<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703111941.png" alt="scrapy --help 执行"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scrapy startproject myScrapyProject</span> <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703112113.png" alt="scrapy startproject myScrapyProject "><br>我们发现下面还有2行文字描述<br>执行一下(注意,这里myScrapyProject-&gt;myScrapyProject )<br><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703112434.png" alt="会生成两个同名的文件夹，项目在最里面那个"></p><p>然后我们用 <code>vsCode</code> 打开项目</p><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703112349.png" alt="20220703112349"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">scrapy crawl example  <span class="hljs-comment">--nolog</span><br></code></pre></td></tr></table></figure><p><strong>命令</strong><br><code>scrapy crawl 爬虫名字   --nolog (不打印日志，打印日志就去掉 --nolog)</code>  </p><h4 id="3-创建-Scrapy-爬虫"><a href="#3-创建-Scrapy-爬虫" class="headerlink" title="3 创建 Scrapy  爬虫"></a>3 创建 <code>Scrapy </code> 爬虫</h4><h5 id="3-1-创建命令"><a href="#3-1-创建命令" class="headerlink" title="3.1 创建命令"></a>3.1 创建命令</h5><h6 id="3-1-1-创建一个爬虫"><a href="#3-1-1-创建一个爬虫" class="headerlink" title="3.1.1 创建一个爬虫"></a>3.1.1 创建一个爬虫</h6><p><code>scrapy genspider   爬虫名称  url  </code></p><p><strong>如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node">scrapy genspider cnblogs  https://www.cnblogs.com/<br></code></pre></td></tr></table></figure><blockquote><p>这里创建了一个名字叫做    <code>cnblogs </code> 的爬虫， 初始 <code>url</code> 为 <code>https://www.cnblogs.com/</code> 没错，这里是去爬博客园的首页文章~~~</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node">E:\python学习\myScrapyProject\myScrapyProject&gt;scrapy genspider cnblogs  https://www.cnblogs.com/<br>Created spider &#x27;cnblogs&#x27; using template &#x27;basic&#x27; in module:<br>  myScrapyProject.spiders.cnblogs<br></code></pre></td></tr></table></figure><p> <img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703153311.png" alt="scrapy genspider cnblogs url"></p><p>我们分析一下博客园，这里强烈推荐一个Xpath 帮助插件</p><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703154530.png" alt="20220703154530"></p><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703160437.png" alt="20220703160437"></p><p>大家可以看到，这段xpath 可以获取文章的所有信息，包括 标题，内容，作者，发布时间等等</p><p>我们可以编写我们的 <code>cnblogs</code> 爬虫:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CnblogsSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">&#x27;cnblogs&#x27;</span><br>    allowed_domains = [<span class="hljs-string">&#x27;www.cnblogs.com&#x27;</span>]<br>    start_urls = [<span class="hljs-string">&#x27;http://www.cnblogs.com/&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-built_in">print</span>(response.text)<br>        <span class="hljs-comment"># 所有文章</span><br>        nodeXpath=response.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;post_list&#x27;]/article[@class=&#x27;post-item&#x27;]&quot;</span>)<br>        <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703160737.png" alt="20220703160737"><br>我们这里分析一下，</p><p>现在我们要获取标题，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-item&quot;</span> <span class="hljs-attr">data-post-id</span>=<span class="hljs-string">&quot;16439338&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-item-body&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-item-text&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-item-title xh-highlight&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.cnblogs.com/ilyyin/p/16439338.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>nifi从入门到实战（保姆级教程）——flow<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-item-summary&quot;</span>&gt;</span><br>                    本文章首发于博客园，转载请标明出处 经过前两篇文章（环境篇，身份验证），我们已经有了nifi可以运行的基础，今天就来实现一个案例吧。 假设我们要从ftp上获取一个zip包，里面有两个csv文件，一个是manufacture.csv,一个是brand.csv.然后要把这两个文件导入到sqlserver ...<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们前面已经拿到了 <code>//div[@id=&#39;post_list&#39;]/article[@class=&#39;post-item&#39;] </code><br>然后我们发现，<code>article[@class=&#39;post-item&#39;] </code> 还有个 <code>section</code><br>所以我们的<code>xpath</code> 应该是这样的：<code>//section[@class=&#39;post-item-body&#39;]/div[@class=&#39;post-item-text&#39;]/a[@class=&#39;post-item-title&#39;]</code> ,单是我们的     <code>cnblogs</code> 爬虫，我们已经获取到了<code>nodeXpath</code>了 所以我们这里就要改成 以当前为根节点<code>./section[@class=&#39;post-item-body&#39;]/div[@class=&#39;post-item-text&#39;]/a[@class=&#39;post-item-title&#39;]</code> (这里<code>//</code> 表示的是以<code>body</code> 为根节点)，所以我们的下面代码就可以写成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CnblogsSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">&#x27;cnblogs&#x27;</span><br>    allowed_domains = [<span class="hljs-string">&#x27;www.cnblogs.com&#x27;</span>]<br>    start_urls = [<span class="hljs-string">&#x27;http://www.cnblogs.com/&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-built_in">print</span>(response.text)<br>        <span class="hljs-comment"># 所有文章</span><br>        nodeXpath=response.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;post_list&#x27;]/article[@class=&#x27;post-item&#x27;]&quot;</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span>  nodeXpath:<br><br>            <span class="hljs-comment"># 文章标题</span><br>            title=item.xpath(<span class="hljs-string">&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot;</span>)<br><br>            <span class="hljs-comment"># 文章描述</span><br>            summary=item.xpath(<span class="hljs-string">&quot;./section/div[@class=&#x27;post-item-text&#x27;]/p[@class=&#x27;post-item-summary&#x27;]/text()&quot;</span>)<br>            <span class="hljs-comment"># 作者</span><br>            summary=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-item-author&#x27;]/span/text()&quot;</span>) <br>            <span class="hljs-comment"># 时间</span><br>            summary=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/span[@class=&#x27;post-meta-item&#x27;]/span/text()&quot;</span>) <br><br>            <span class="hljs-comment"># 点赞</span><br>            summary=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;</span>) <br><br>            <span class="hljs-comment"># 评论</span><br>            summary=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;</span>) <br><br>            <span class="hljs-comment"># 浏览</span><br>            summary=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;</span>) <br><br><br>            <span class="hljs-built_in">print</span>(title)<br><br></code></pre></td></tr></table></figure><p>执行程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scrapy crawl cnblogs --nolog<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703161241.png" alt="20220703161241"></p><p>但是我们这里，发现，这里的值怎么是这样的 <code>[&lt;Selector xpath=&quot;./section/div[@class=&#39;post-item-text&#39;]/a[@class=&#39;post-item-title&#39;]/text()&quot; data=&#39;Unity3D学习笔记4——创建Mesh高级接口&#39;&gt;]</code><br>别慌，这里用数据包起来了，我们调整下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 文章标题</span><br>  title=item.xpath(<span class="hljs-string">&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot;</span>)[<span class="hljs-number">0</span>]  <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">scrapy crawl cnblogs --nolog<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&lt;Selector xpath=&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-<span class="hljs-built_in">title</span>&#x27;]/text()&quot; data=&#x27;Unity3D学习笔记<span class="hljs-number">4</span>——创建Mesh高级接口&#x27;&gt;<br></code></pre></td></tr></table></figure><p>发现还不是咱们想要的， 这里要介绍两个关键词</p><blockquote><p>extract()<br>extract_first()</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220703162425.png" alt="20220703162425"></p><p><a href="https://www.cnblogs.com/wfnj/p/10794892.html">详细链接</a></p><h4 id="4-应用运行-Scrapy"><a href="#4-应用运行-Scrapy" class="headerlink" title="4 应用运行 Scrapy"></a>4 应用运行 Scrapy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> scrapy<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CnblogsSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">&#x27;cnblogs&#x27;</span><br>    allowed_domains = [<span class="hljs-string">&#x27;www.cnblogs.com&#x27;</span>]<br>    start_urls = [<span class="hljs-string">&#x27;http://www.cnblogs.com/&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-built_in">print</span>(response.text)<br>        <span class="hljs-comment"># 所有文章</span><br>        nodeXpath=response.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;post_list&#x27;]/article[@class=&#x27;post-item&#x27;]&quot;</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span>  nodeXpath:<br><br>            <span class="hljs-comment"># 文章标题</span><br>            article_title=item.xpath(<span class="hljs-string">&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot;</span>)[<span class="hljs-number">0</span>].extract()<br>            <span class="hljs-comment"># 或者</span><br>            article_title=item.xpath(<span class="hljs-string">&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot;</span>).extract_first()<br>            <span class="hljs-comment"># 文章描述</span><br>            article_summary=item.xpath(<span class="hljs-string">&quot;./section/div[@class=&#x27;post-item-text&#x27;]/p[@class=&#x27;post-item-summary&#x27;]/text()&quot;</span>).extract_first()<br>            <span class="hljs-comment"># 作者</span><br>            article_autuor=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-item-author&#x27;]/span/text()&quot;</span>) .extract_first()<br>            <span class="hljs-comment"># 时间</span><br>            article_time=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/span[@class=&#x27;post-meta-item&#x27;]/span/text()&quot;</span>) .extract_first()<br><br>            <span class="hljs-comment"># 点赞</span><br>            article_up=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;</span>) .extract_first()<br><br>            <span class="hljs-comment"># 评论</span><br>            article_comment=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;</span>) .extract_first()<br><br>            <span class="hljs-comment"># 浏览</span><br>            article_browse=item.xpath(<span class="hljs-string">&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;</span>) .extract_first()<br><br><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file=<span class="hljs-string">&quot;cnblogs.txt&quot;</span>,mode=<span class="hljs-string">&quot;a+&quot;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<span class="hljs-keyword">as</span> f:<br>                f.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;article_title&#125;</span>\t<span class="hljs-subst">&#123;article_summary&#125;</span>\t<span class="hljs-subst">&#123;article_autuor&#125;</span>\t<span class="hljs-subst">&#123;article_time&#125;</span>\t<span class="hljs-subst">&#123;article_up&#125;</span>\t<span class="hljs-subst">&#123;article_comment&#125;</span>\t<span class="hljs-subst">&#123;article_browse&#125;</span>&quot;</span>)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Python Scrapy 框架学习  &gt;&gt;&gt; 查看更多</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Scrapy" scheme="http://example.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>pyinstaller打包闪退处理办法</title>
    <link href="http://example.com/2022/06/28/pyinstaller%E6%89%93%E5%8C%85%E9%97%AA%E9%80%80%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/"/>
    <id>http://example.com/2022/06/28/pyinstaller%E6%89%93%E5%8C%85%E9%97%AA%E9%80%80%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/</id>
    <published>2022-06-28T14:39:56.000Z</published>
    <updated>2022-06-28T15:25:12.346Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-故事引言"><a href="#1-故事引言" class="headerlink" title="1 故事引言"></a>1 故事引言</h5><blockquote><p>我们如果写了一个 Python程序，比如 hello.py  ，然后发给女神，让女神看看效果，可是，女神双击了你的文件，结果啥也没<br>有，你是不是觉得很尴尬？从专业的角度来说，就是女神的电脑缺少了运行环境，而我们的Python 如何才能让女神不用安装什么<br>其它东西，直接双击就能运行呢？这就需要我们本次的主角了</p></blockquote><h5 id="2-安装-Pyinstaller"><a href="#2-安装-Pyinstaller" class="headerlink" title="2 安装 Pyinstaller"></a>2 安装 Pyinstaller</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.doubanio.com<span class="hljs-regexp">/simple/</span>  pyinstaller<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220628230546.png" alt="20220628230546"></p><h5 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h5><p>*<strong>如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220628230247.png" alt="20220628230247"></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe">单文件打包：<br>pyinstaller -F <span class="hljs-number">9</span><span class="hljs-literal">_</span>函数.py <br><br></code></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">E:\Cgrain\AdvancedTraining\21_1_初识Py&gt;pyinstaller -F 9_函数.py <br>79 INFO: PyInstaller: 5.1<br>80 INFO: Python: 3.9.8<br>104 INFO: Platform: Windows-10-10.0.19042<br>... 省列...<br>&#x27;F:<span class="hljs-symbol">\\</span>Python<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>site-packages<span class="hljs-symbol">\\</span>PyInstaller<span class="hljs-symbol">\\</span>hooks&#x27;...<br>6404 INFO: Loading module hook &#x27;hook-encodings.py&#x27; from &#x27;F:<span class="hljs-symbol">\\</span>Python<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>site-packages<span class="hljs-symbol">\\</span>PyInstaller<span class="hljs-symbol">\\</span>hooks&#x27;...    <br>6726 INFO: Loading module hook &#x27;hook-heapq.py&#x27; from &#x27;F:<span class="hljs-symbol">\\</span>Python<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>site-packages<span class="hljs-symbol">\\</span>PyInstaller<span class="hljs-symbol">\\</span>hooks&#x27;.<br>... 省列...<br>6935 INFO: Loading module hook &#x27;hook-xml.etree.cElementTree.py&#x27; from &#x27;F:<span class="hljs-symbol">\\</span>Python<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>site-packages<span class="hljs-symbol">\\</span>PyInstaller<span class="hljs-symbol">\\</span>hooks&#x27;...<br>6937 INFO: Loading module hook &#x27;hook-xml.py&#x27; from &#x27;F:<span class="hljs-symbol">\\</span>Python<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>site-packages<span class="hljs-symbol">\\</span>PyInstaller<span class="hljs-symbol">\\</span>hooks&#x27;...<br>7056 INFO: Loading module hook &#x27;hook-_tkinter.py&#x27; from &#x27;F:<span class="hljs-symbol">\\</span>Python<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>site-packages<span class="hljs-symbol">\\</span>PyInstaller<span class="hljs-symbol">\\</span>hooks&#x27;...<br>7314 INFO: checking Tree<br>7314 INFO: Building Tree because Tree-00.toc is non existent<br>7314 INFO: Building Tree Tree-00.toc<br> <br>... 省列...<br>7624 INFO: Looking for ctypes DLLs<br>7656 INFO: Analyzing run-time hooks ...<br>7661 INFO: Including run-time hook &#x27;F:<span class="hljs-symbol">\\</span>Python<span class="hljs-symbol">\\</span>lib<span class="hljs-symbol">\\</span>site-packages<span class="hljs-symbol">\\</span>PyInstaller<span class="hljs-symbol">\\</span>hooks<span class="hljs-symbol">\\</span>rthooks<span class="hljs-symbol">\\</span>pyi_rth_subprocess.py&#x27;<br>7674 INFO: Looking for dynamic libraries<br>8286 INFO: Looking for eggs<br>8287 INFO: Using Python library F:\Python\python39.dll<br>  <br>10493 INFO: Writing RT_ICON 6 resource with 4264 bytes<br>10495 INFO: Writing RT_ICON 7 resource with 1128 bytes<br>10500 INFO: Copying 0 resources to EXE<br>10502 INFO: Embedding manifest in EXE<br>10504 INFO: Updating manifest in E:\Cgrain\AdvancedTraining\21_1_初识Py\dist\9_函数.exe.notanexecutable<br>10506 INFO: Updating resource type 24 name 1 language 0<br>10512 INFO: Appending PKG archive to EXE<br>12460 INFO: Building EXE from EXE-00.toc completed successfully.<br></code></pre></td></tr></table></figure><p><em><strong>生成了两个文件夹</strong></em></p><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220628231252.png" alt="20220628231252"></p><p>打开<code>dist</code> 文件</p><p>双击，然后就会发现一闪而过</p><p>我们需要打开cmd 然后再cmd 运行，如下<br><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220628231507.png" alt="20220628231507"></p><blockquote><p>ps 如果我们需要双击的时候打开，你只需要在python 源文件最后面加一个 input(“”) 这样他就会一直打开了</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">多文件打包：<br>pyinstaller - 文件<br><br></code></pre></td></tr></table></figure><p>** 注意，多文件打包必须要有一个主文件（启动文件）**</p><p>下面我们来进行多文件打包<br><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220628231745.png" alt="20220628231745"></p><p>可以明显的看出，我们的主文件是app.py</p><p>我们进行 打包</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">pyinstaller</span> <span class="hljs-operator">-</span><span class="hljs-built_in">D</span> <span class="hljs-variable">app</span><span class="hljs-operator">.</span><span class="hljs-variable">py</span><br></code></pre></td></tr></table></figure><p>Log</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">E:\Cgrain\AdvancedTraining\Request1688&gt;pyinstaller -D app.py                                          <br><span class="hljs-number">127</span> INFO: PyInstaller: <span class="hljs-number">5.1</span><br><span class="hljs-number">127</span> INFO: Python: <span class="hljs-number">3.9</span>.<span class="hljs-number">8</span><br><span class="hljs-number">157</span> INFO: Platform: Windows-<span class="hljs-number">10</span>-<span class="hljs-number">10.0</span>.<span class="hljs-number">19042</span><br><br>...<br><span class="hljs-number">10920</span> INFO: Building EXE <span class="hljs-keyword">from</span> EXE-<span class="hljs-number">00</span>.toc completed successfully.<br><span class="hljs-number">10925</span> INFO: checking <span class="hljs-keyword">COLLECT</span><br><span class="hljs-number">10926</span> INFO: Building <span class="hljs-keyword">COLLECT</span> because <span class="hljs-keyword">COLLECT</span>-<span class="hljs-number">00</span>.toc is non existent<br><span class="hljs-number">10927</span> INFO: Building <span class="hljs-keyword">COLLECT</span> <span class="hljs-keyword">COLLECT</span>-<span class="hljs-number">00</span>.toc<br><span class="hljs-number">11281</span> INFO: Building <span class="hljs-keyword">COLLECT</span> <span class="hljs-keyword">COLLECT</span>-<span class="hljs-number">00</span>.toc completed successfully.<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220628232039.png" alt="20220628232039"></p><p>可以看出，也生成了两个文件夹，我们打开dist文件夹</p><p>一直进去，最后发现<br><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220628232128.png" alt="20220628232128"></p><p>双击发现，一闪而过，关于使用pyinstaller 打包完成之后的问题，没有什么好的办法能够制止他一闪而过，你在项目input 了他也无效，经过测试，发现了一个很好的处理方法，不在用单身二十多年的手速来进行快速截图定位错误了</p><p><strong>处理办法，直接在项目cmd 运行，然后输入app.exe,如下</strong><br><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220628232332.png" alt="20220628232332"></p><p>这样子不管怎么报错，他都不会自动关闭了，定位问题也变得简单了<br>好了，今天的文章就写在这里了，如果有什么不会的可以在下面留言，谢谢大家</p>]]></content>
    
    
    <summary type="html">我们如果写了一个 Python程序，比如 hello.py  ，然后发给女神，让女神看看效果，可是，女神双击了你的文件，结果啥也没有，你是不是觉得很尴尬？从专业的角度来说，就是女神的电脑缺少了运行环境，而我们的Python 如何才能让女神不用安装什么其它东西，直接双击就能运行呢？这就需要我们本次的主角了... &gt;&gt;&gt; 查看更多</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Pyinstaller" scheme="http://example.com/tags/Pyinstaller/"/>
    
  </entry>
  
  <entry>
    <title>vscode+picgo插件_hexo_编写文章</title>
    <link href="http://example.com/2022/06/27/vscode-picgo%E6%8F%92%E4%BB%B6-hexo-%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2022/06/27/vscode-picgo%E6%8F%92%E4%BB%B6-hexo-%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/</id>
    <published>2022-06-27T14:56:48.000Z</published>
    <updated>2022-06-28T14:31:20.419Z</updated>
    
    <content type="html"><![CDATA[<p><strong>话不多说，效果如下：</strong><br><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220627231620.png" alt="最终效果图"></p><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220627225756.png" alt="Vscode 编辑图"></p><p><strong>我们是怎么搭建起来的呢？</strong></p><h4 id="第一步-vscode-搜索-Picgo"><a href="#第一步-vscode-搜索-Picgo" class="headerlink" title="第一步 vscode 搜索 Picgo"></a>第一步 <code>vscode</code> 搜索 <code>Picgo</code></h4><p><code>vscode</code> 搜索 <code>Picgo</code><br><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220627225911.png" alt="Vscode 搜索插件"></p><h4 id="第二步-进入设置"><a href="#第二步-进入设置" class="headerlink" title="第二步 进入设置"></a>第二步 进入设置</h4><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220627225956.png" alt="进入设置"></p><h4 id="第三步-配置-Github"><a href="#第三步-配置-Github" class="headerlink" title="第三步 配置 Github"></a>第三步 配置 <code>Github</code></h4><p><img src="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main/blogs/pictures/20220627230326.png" alt="配置github"></p><h4 id="第四步配置解释"><a href="#第四步配置解释" class="headerlink" title="第四步配置解释"></a>第四步配置解释</h4><blockquote><p><code>Current</code>  这里可以选很多，如 <code>github</code>，<code>gitee</code><br><code>Branch</code>  分支 ，默认只有<code>main</code> 我也没有创建其它分支了，所以就用这个了，如果这里改了，下面所有是<code>main</code>  的都要改成你写的分支，建议不要改<br><code>Custom Url</code> <a href="https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main">https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main</a> 可以表示成<br><a href="https://cdn.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93@%E5%88%86%E6%94%AF%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E6%98%AF%E4%B8%BB">https://cdn.jsdelivr.net/gh/你的github用户名/仓库@分支，我这里是主</a><br>blogs&#x2F;pictures&#x2F; 这里是路径，如果不想加路径就直接写一个 &#x2F;<br><code>Path</code>  github用户名&#x2F;仓库名称<br><code>Token</code>  生成地址 <a href="https://github.com/settings/tokens/new">Token 创建地址</a></p></blockquote><h4 id="MarkDown-语法学习"><a href="#MarkDown-语法学习" class="headerlink" title="MarkDown 语法学习"></a>MarkDown 语法学习</h4><blockquote><p><a href="https://blog.csdn.net/weixin_43527871/article/details/107197708">Markdown 语法学习</a></p></blockquote>]]></content>
    
    
    <summary type="html">使用Vscode+Picgo+github 存储我们博客的图           片                                                                                                       &gt;&gt;&gt; 查看更多</summary>
    
    
    
    <category term="博客搭建" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Vscode" scheme="http://example.com/tags/Vscode/"/>
    
    <category term="Picgo" scheme="http://example.com/tags/Picgo/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo 搭建博客的第一篇文章</title>
    <link href="http://example.com/2022/06/26/hello-world/"/>
    <id>http://example.com/2022/06/26/hello-world/</id>
    <published>2022-06-26T14:19:29.521Z</published>
    <updated>2022-06-26T14:23:25.598Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一个新的文件夹"><a href="#创建一个新的文件夹" class="headerlink" title="创建一个新的文件夹"></a>创建一个新的文件夹</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> page links   &gt;&gt; 这会创建一个links 的文件夹，文件夹下面创建一个<span class="hljs-keyword">index</span>.md<br></code></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server  <br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate  <br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="入门" scheme="http://example.com/categories/%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python包管理</title>
    <link href="http://example.com/2022/06/26/Python%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/06/26/Python%E5%8C%85%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-26T10:35:33.000Z</published>
    <updated>2022-06-26T14:23:31.779Z</updated>
    
    <content type="html"><![CDATA[<p>在Python 包文件安装的过程中，pip install 下载包很慢，我们就需要借助其他源赖进行快速下载，下面是我找到的几个能够加速Python 包下载的镜像源 </p><h3 id="1-Python-加速下载"><a href="#1-Python-加速下载" class="headerlink" title="1  Python 加速下载"></a>1  Python 加速下载</h3><h4 id="1-1-源"><a href="#1-1-源" class="headerlink" title="1.1 源"></a>1.1 源</h4><h5 id="1-1-1-清华源"><a href="#1-1-1-清华源" class="headerlink" title="1.1.1 清华源"></a>1.1.1 清华源</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>pypi.tuna.tsinghua.edu.cn<span class="hljs-regexp">/simple/</span> <br><br></code></pre></td></tr></table></figure><h5 id="1-1-2-豆瓣源"><a href="#1-1-2-豆瓣源" class="headerlink" title="1.1.2 豆瓣源"></a>1.1.2 豆瓣源</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>pypi.doubanio.com<span class="hljs-regexp">/simple/</span> <br><br></code></pre></td></tr></table></figure><h3 id="2-包下载"><a href="#2-包下载" class="headerlink" title="2 包下载"></a>2 包下载</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install -i https:<span class="hljs-regexp">//</span>pypi.doubanio.com<span class="hljs-regexp">/simple/</span> Django <br><br></code></pre></td></tr></table></figure><h3 id="包下载"><a href="#包下载" class="headerlink" title="包下载"></a>包下载</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">包卸载 <br><br>pip uninstall xxx<br><br></code></pre></td></tr></table></figure><h3 id="4-包管理升级"><a href="#4-包管理升级" class="headerlink" title="4 包管理升级"></a>4 包管理升级</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>升级pip<br>python -m pip install <span class="hljs-attr">--upgrade</span> pip -<span class="hljs-selector-tag">i</span> https:<span class="hljs-comment">//pypi.douban.com/simple </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在Python 包文件安装的过程中，pip install 下载包很慢，我们就需要借助其他源赖进行快速下载，下面是我找到的几个能够加速Python 包下载的镜像源                           &gt;&gt;&gt; 查看更多</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python包管理" scheme="http://example.com/tags/Python%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
