{"meta":{"title":"Ray 的博客","subtitle":"","description":"","author":"Ray","url":"http://example.com","root":"/"},"pages":[{"title":"标题","date":"2022-06-30T14:26:24.508Z","updated":"2022-06-30T14:26:24.508Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"关于我一个写前端的后端抠图仔，主要使用 .NET语言开发，会一些简单的 Python ，对Python 逆向破解很有兴趣 🚩来自湖南🚩98年单身未婚适龄待娶青年🚩目前在深圳工作🚩以后可能定居老家🚩想找个自己这边的女孩，可能在深圳遇见的概率不是很大，但，万一呢？ 技能开发语言 Python NET Vue 工具使用 Git SVN 数据库 SQL Server Mysql Pgsql"},{"title":"分类","date":"2022-06-26T08:45:52.062Z","updated":"2022-06-26T08:45:52.062Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":"分类"},{"title":"","date":"2022-06-26T09:50:48.167Z","updated":"2022-06-26T09:50:11.000Z","comments":false,"path":"css/iconfont.css","permalink":"http://example.com/css/iconfont.css","excerpt":"","text":"@font-face { font-family: \"iconfont\"; /* Project id */ src: url('iconfont.ttf?t=1656237011177') format('truetype'); } .iconfont { font-family: \"iconfont\" !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } .icon-bokeyuan:before { content: \"\\e623\"; }"},{"title":"","date":"2022-06-26T09:50:23.772Z","updated":"2022-06-26T09:50:11.000Z","comments":false,"path":"css/iconfont.js","permalink":"http://example.com/css/iconfont.js","excerpt":"","text":"!function(e){var t,c,l,n,o,i='',d=(d=document.getElementsByTagName(\"script\"))[d.length-1].getAttribute(\"data-injectcss\"),a=function(e,t){t.parentNode.insertBefore(e,t)};if(d&&!e.__iconfont__svg__cssinject__){e.__iconfont__svg__cssinject__=!0;try{document.write(\".svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}\")}catch(e){console&&console.log(e)}}function s(){o||(o=!0,l())}function r(){try{n.documentElement.doScroll(\"left\")}catch(e){return void setTimeout(r,50)}s()}t=function(){var e,t=document.createElement(\"div\");t.innerHTML=i,i=null,(t=t.getElementsByTagName(\"svg\")[0])&&(t.setAttribute(\"aria-hidden\",\"true\"),t.style.position=\"absolute\",t.style.width=0,t.style.height=0,t.style.overflow=\"hidden\",t=t,(e=document.body).firstChild?a(t,e.firstChild):e.appendChild(t))},document.addEventListener?~[\"complete\",\"loaded\",\"interactive\"].indexOf(document.readyState)?setTimeout(t,0):(c=function(){document.removeEventListener(\"DOMContentLoaded\",c,!1),t()},document.addEventListener(\"DOMContentLoaded\",c,!1)):document.attachEvent&&(l=t,n=e.document,o=!1,r(),n.onreadystatechange=function(){\"complete\"==n.readyState&&(n.onreadystatechange=null,s())})}(window);"},{"title":"","date":"2022-06-26T09:50:23.766Z","updated":"2022-06-26T09:50:11.000Z","comments":false,"path":"css/iconfont.json","permalink":"http://example.com/css/iconfont.json","excerpt":"","text":"{\"id\":\"\",\"name\":\"\",\"font_family\":\"iconfont\",\"css_prefix_text\":\"icon-\",\"description\":\"\",\"glyphs\":[{\"icon_id\":\"833511\",\"name\":\"博客园\",\"font_class\":\"bokeyuan\",\"unicode\":\"e623\",\"unicode_decimal\":58915}]}"},{"title":"友情链接","date":"2022-06-26T10:33:24.742Z","updated":"2022-06-26T10:33:24.742Z","comments":false,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":"标签"},{"title":"404","date":"2022-06-29T14:52:21.000Z","updated":"2022-06-29T15:04:53.942Z","comments":false,"path":"page404/index.html","permalink":"http://example.com/page404/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-06-26T08:46:20.369Z","updated":"2022-06-26T08:46:20.369Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":"标签"}],"posts":[{"title":"Python_Scrapy_框架学习","slug":"Python-Scrapy-框架学习","date":"2022-07-03T02:44:21.000Z","updated":"2022-07-03T08:42:19.139Z","comments":true,"path":"2022/07/03/Python-Scrapy-框架学习/","link":"","permalink":"http://example.com/2022/07/03/Python-Scrapy-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/","excerpt":"Python Scrapy 框架学习 >>> 查看更多","text":"1概念 2学习目标 Scrapy 框架安装 创建 Scrapy 项目 创建 Scrapy 爬虫 应用运行 Scrapy 掌握Scrapy 定位以及提取方法 掌握Response 响应对象的常用属性 2.1 Scrapy 框架安装1pip install -i https://pypi.doubanio.com/simple/ scrapy 2.2 Scrapy 项目创建我们先查看一下命令 12345678910111213141516171819202122E:\\python学习\\myScrapyProject\\myScrapyProject&gt;scrapy --helpScrapy 2.6.1 - project: myScrapyProjectUsage: scrapy &lt;command&gt; [options] [args]Available commands: bench Run quick benchmark test check Check spider contracts commands crawl Run a spider edit Edit spider fetch Fetch a URL using the Scrapy downloader genspider Generate new spider using pre-defined templates list List available spiders parse Parse URL (using its spider) and print the results runspider Run a self-contained spider (without creating a project) settings Get settings values shell Interactive scraping console startproject Create new project version Print Scrapy version view Open URL in browser, as seen by Scrapy 1scrapy startproject myScrapyProject 我们发现下面还有2行文字描述执行一下(注意,这里myScrapyProject-&gt;myScrapyProject ) 然后我们用 vsCode 打开项目 3创建 Scrapy 爬虫scrapy genspider 爬虫名称 url 如下： 1scrapy genspider cnblogs https://www.cnblogs.com/ 这里创建了一个名字叫做 cnblogs 的爬虫， 初始 url 为 https://www.cnblogs.com/ 没错，这里是去爬博客园的首页文章~~~ 123E:\\python学习\\myScrapyProject\\myScrapyProject&gt;scrapy genspider cnblogs https://www.cnblogs.com/Created spider &#x27;cnblogs&#x27; using template &#x27;basic&#x27; in module: myScrapyProject.spiders.cnblogs 4应用运行 Scrapy执行程序 1scrapy crawl cnblogs --nolog 5掌握Scrapy 定位以及提取方法我们分析一下博客园，这里强烈推荐一个Xpath 帮助插件 大家可以看到，这段xpath 可以获取文章的所有信息，包括 标题，内容，作者，发布时间等等 我们可以编写我们的 cnblogs 爬虫: 12345678910111213import scrapyclass CnblogsSpider(scrapy.Spider): name = &#x27;cnblogs&#x27; allowed_domains = [&#x27;www.cnblogs.com&#x27;] start_urls = [&#x27;http://www.cnblogs.com/&#x27;] def parse(self, response): print(response.text) # 所有文章 nodeXpath=response.xpath(&quot;//div[@id=&#x27;post_list&#x27;]/article[@class=&#x27;post-item&#x27;]&quot;) 我们这里分析一下， 现在我们要获取标题， 1234567&lt;article class=&quot;post-item&quot; data-post-id=&quot;16439338&quot;&gt; &lt;section class=&quot;post-item-body&quot;&gt; &lt;div class=&quot;post-item-text&quot;&gt; &lt;a class=&quot;post-item-title xh-highlight&quot; href=&quot;https://www.cnblogs.com/ilyyin/p/16439338.html&quot; target=&quot;_blank&quot;&gt;nifi从入门到实战（保姆级教程）——flow&lt;/a&gt; &lt;p class=&quot;post-item-summary&quot;&gt; 本文章首发于博客园，转载请标明出处 经过前两篇文章（环境篇，身份验证），我们已经有了nifi可以运行的基础，今天就来实现一个案例吧。 假设我们要从ftp上获取一个zip包，里面有两个csv文件，一个是manufacture.csv,一个是brand.csv.然后要把这两个文件导入到sqlserver ... &lt;/p&gt; 我们前面已经拿到了 //div[@id=&#39;post_list&#39;]/article[@class=&#39;post-item&#39;] 然后我们发现，article[@class=&#39;post-item&#39;] 还有个 section所以我们的xpath 应该是这样的：//section[@class=&#39;post-item-body&#39;]/div[@class=&#39;post-item-text&#39;]/a[@class=&#39;post-item-title&#39;] ,单是我们的 cnblogs 爬虫，我们已经获取到了nodeXpath了 所以我们这里就要改成 以当前为根节点./section[@class=&#39;post-item-body&#39;]/div[@class=&#39;post-item-text&#39;]/a[@class=&#39;post-item-title&#39;] (这里// 表示的是以body 为根节点)，所以我们的下面代码就可以写成 12345678910111213141516171819202122232425262728293031323334import scrapyclass CnblogsSpider(scrapy.Spider): name = &#x27;cnblogs&#x27; allowed_domains = [&#x27;www.cnblogs.com&#x27;] start_urls = [&#x27;http://www.cnblogs.com/&#x27;] def parse(self, response): print(response.text) # 所有文章 nodeXpath=response.xpath(&quot;//div[@id=&#x27;post_list&#x27;]/article[@class=&#x27;post-item&#x27;]&quot;) for item in nodeXpath: # 文章标题 title=item.xpath(&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot;) # 文章描述 summary=item.xpath(&quot;./section/div[@class=&#x27;post-item-text&#x27;]/p[@class=&#x27;post-item-summary&#x27;]/text()&quot;) # 作者 summary=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-item-author&#x27;]/span/text()&quot;) # 时间 summary=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/span[@class=&#x27;post-meta-item&#x27;]/span/text()&quot;) # 点赞 summary=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;) # 评论 summary=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;) # 浏览 summary=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;) print(title) 但是我们这里，发现，这里的值怎么是这样的 [&lt;Selector xpath=&quot;./section/div[@class=&#39;post-item-text&#39;]/a[@class=&#39;post-item-title&#39;]/text()&quot; data=&#39;Unity3D学习笔记4——创建Mesh高级接口&#39;&gt;]别慌，这里用数据包起来了，我们调整下 12# 文章标题 title=item.xpath(&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot;)[0] 1scrapy crawl cnblogs --nolog 1&lt;Selector xpath=&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot; data=&#x27;Unity3D学习笔记4——创建Mesh高级接口&#x27;&gt; 6掌握Response 响应对象的常用属性发现还不是咱们想要的， 这里要介绍两个关键词 extract()extract_first() extract() 与extract_first() 7最终爬虫效果7.1代码1234567891011121314151617181920212223242526272829303132333435363738import scrapyclass CnblogsSpider(scrapy.Spider): name = &#x27;cnblogs&#x27; allowed_domains = [&#x27;www.cnblogs.com&#x27;] start_urls = [&#x27;http://www.cnblogs.com/&#x27;] def parse(self, response): print(response.text) # 所有文章 nodeXpath=response.xpath(&quot;//div[@id=&#x27;post_list&#x27;]/article[@class=&#x27;post-item&#x27;]&quot;) for item in nodeXpath: # 文章标题 article_title=item.xpath(&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot;)[0].extract() # 或者 article_title=item.xpath(&quot;./section/div[@class=&#x27;post-item-text&#x27;]/a[@class=&#x27;post-item-title&#x27;]/text()&quot;).extract_first() # 文章描述 article_summary=item.xpath(&quot;./section/div[@class=&#x27;post-item-text&#x27;]/p[@class=&#x27;post-item-summary&#x27;]/text()&quot;).extract_first() # 作者 article_autuor=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-item-author&#x27;]/span/text()&quot;) .extract_first() # 时间 article_time=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/span[@class=&#x27;post-meta-item&#x27;]/span/text()&quot;) .extract_first() # 点赞 article_up=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;) .extract_first() # 评论 article_comment=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;) .extract_first() # 浏览 article_browse=item.xpath(&quot;./section/footer[@class=&#x27;post-item-foot&#x27;]/a[@class=&#x27;post-meta-item btn&#x27;][1]/span/text()&quot;) .extract_first() with open(file=&quot;cnblogs.txt&quot;,mode=&quot;a+&quot;,encoding=&quot;utf-8&quot;)as f: f.write(f&quot;&#123;article_title&#125;\\t&#123;article_summary&#125;\\t&#123;article_autuor&#125;\\t&#123;article_time&#125;\\t&#123;article_up&#125;\\t&#123;article_comment&#125;\\t&#123;article_browse&#125;&quot;) 7.2 效果123456789101112131415161718192021222324【计算机系统基础1】gdb、gcc简易使用指南 【计算机系统基础1】gdb、gcc简易使用指南 1. 基本实验工具的使用 1.1GCC 在IA-32+LINUX平台 在IA-32+LINUX平台上，编译，调试和运行C语言 为了把C语言源程序编译成IA-32机器指令，X86-64位计算机系统需要先运行下列命令: sudo apt-get insta ... 阿宇的计算机世界 2022-07-03 16:22 0 0 0Android高仿网易云音乐-启动界面实现和动态权限处理 爱学啊 2022-07-03 16:09 0 0 0前端周刊第二十六期 夕阳白雪 2022-07-03 15:56 0 0 0利用MySQL中的乐观锁和悲观锁实现分布式锁 eaglelihh 2022-07-03 15:13 0 0 0nifi从入门到实战（保姆级教程）——flow 本文章首发于博客园，转载请标明出处 经过前两篇文章（环境篇，身份验证），我们已经有了nifi可以运行的基础，今天就来实现一个案例吧。 假设我们要从ftp上获取一个zip包，里面有两个csv文件，一个是manufacture.csv,一个是brand.csv.然后要把这两个文件导入到sqlserver ... ilyyin 2022-07-03 15:11 0 0 0聊聊Netty那些事儿之从内核角度看IO模型 bin的技术小屋 2022-07-03 14:40 0 0 0docker的平替--podman eryoung2 2022-07-03 13:30 0 0 0抓包整理外篇fiddler———— 会话栏与过滤器[二] 敖毛毛 2022-07-03 10:15 0 0 0rxjava回调地狱-kotlin协程来帮忙 俞正东 2022-07-03 10:11 0 0 0图文看懂JavaScritpt引擎V8与JS执行过程 会飞的一棵树 2022-07-03 00:11 0 0 0测试右移：线上质量监控 ELK 实战 Juno3550 2022-07-02 23:43 0 0 0简单聊聊运维监控的其他用途 charlieroro 2022-07-02 22:55 0 0 0不是吧？30秒 就能学会一个python小技巧？！ 小熊猫爱恰饭 2022-07-02 22:54 0 0 0容器运行时分析 JonPan 2022-07-02 22:22 0 0 0程序分析与优化 - 9 附录 XLA的缓冲区指派 周荣华 2022-07-02 21:40 0 0 0分享一下如何制作专业的手绘电子地图 轻轻的烟雾 2022-07-02 21:03 0 0 0ArrayList分析2 :Itr、ListIterator以及SubList中的坑 funnyZpC 2022-07-02 20:50 0 0 0后端接入层技术的一些思考 三国梦回 2022-07-02 20:33 0 0 0技术人创业：失败不是成功，但反思是 freephp 2022-07-02 20:07 3 3 3Unity3D学习笔记4——创建Mesh高级接口 charlee44 2022-07-02 19:32 0 0 0","categories":[{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"}],"tags":[{"name":"Scrapy","slug":"Scrapy","permalink":"http://example.com/tags/Scrapy/"}]},{"title":"pyinstaller打包闪退处理办法","slug":"pyinstaller打包闪退处理办法","date":"2022-06-28T14:39:56.000Z","updated":"2022-06-28T15:25:12.346Z","comments":true,"path":"2022/06/28/pyinstaller打包闪退处理办法/","link":"","permalink":"http://example.com/2022/06/28/pyinstaller%E6%89%93%E5%8C%85%E9%97%AA%E9%80%80%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/","excerpt":"我们如果写了一个 Python程序，比如 hello.py ，然后发给女神，让女神看看效果，可是，女神双击了你的文件，结果啥也没有，你是不是觉得很尴尬？从专业的角度来说，就是女神的电脑缺少了运行环境，而我们的Python 如何才能让女神不用安装什么其它东西，直接双击就能运行呢？这就需要我们本次的主角了... >>> 查看更多","text":"1 故事引言 我们如果写了一个 Python程序，比如 hello.py ，然后发给女神，让女神看看效果，可是，女神双击了你的文件，结果啥也没有，你是不是觉得很尴尬？从专业的角度来说，就是女神的电脑缺少了运行环境，而我们的Python 如何才能让女神不用安装什么其它东西，直接双击就能运行呢？这就需要我们本次的主角了 2 安装 Pyinstaller12pip install -i https://pypi.doubanio.com/simple/ pyinstaller 3 使用*如下： 123单文件打包：pyinstaller -F 9_函数.py 1234567891011121314151617181920212223242526272829303132E:\\Cgrain\\AdvancedTraining\\21_1_初识Py&gt;pyinstaller -F 9_函数.py 79 INFO: PyInstaller: 5.180 INFO: Python: 3.9.8104 INFO: Platform: Windows-10-10.0.19042... 省列...&#x27;F:\\\\Python\\\\lib\\\\site-packages\\\\PyInstaller\\\\hooks&#x27;...6404 INFO: Loading module hook &#x27;hook-encodings.py&#x27; from &#x27;F:\\\\Python\\\\lib\\\\site-packages\\\\PyInstaller\\\\hooks&#x27;... 6726 INFO: Loading module hook &#x27;hook-heapq.py&#x27; from &#x27;F:\\\\Python\\\\lib\\\\site-packages\\\\PyInstaller\\\\hooks&#x27;.... 省列...6935 INFO: Loading module hook &#x27;hook-xml.etree.cElementTree.py&#x27; from &#x27;F:\\\\Python\\\\lib\\\\site-packages\\\\PyInstaller\\\\hooks&#x27;...6937 INFO: Loading module hook &#x27;hook-xml.py&#x27; from &#x27;F:\\\\Python\\\\lib\\\\site-packages\\\\PyInstaller\\\\hooks&#x27;...7056 INFO: Loading module hook &#x27;hook-_tkinter.py&#x27; from &#x27;F:\\\\Python\\\\lib\\\\site-packages\\\\PyInstaller\\\\hooks&#x27;...7314 INFO: checking Tree7314 INFO: Building Tree because Tree-00.toc is non existent7314 INFO: Building Tree Tree-00.toc ... 省列...7624 INFO: Looking for ctypes DLLs7656 INFO: Analyzing run-time hooks ...7661 INFO: Including run-time hook &#x27;F:\\\\Python\\\\lib\\\\site-packages\\\\PyInstaller\\\\hooks\\\\rthooks\\\\pyi_rth_subprocess.py&#x27;7674 INFO: Looking for dynamic libraries8286 INFO: Looking for eggs8287 INFO: Using Python library F:\\Python\\python39.dll 10493 INFO: Writing RT_ICON 6 resource with 4264 bytes10495 INFO: Writing RT_ICON 7 resource with 1128 bytes10500 INFO: Copying 0 resources to EXE10502 INFO: Embedding manifest in EXE10504 INFO: Updating manifest in E:\\Cgrain\\AdvancedTraining\\21_1_初识Py\\dist\\9_函数.exe.notanexecutable10506 INFO: Updating resource type 24 name 1 language 010512 INFO: Appending PKG archive to EXE12460 INFO: Building EXE from EXE-00.toc completed successfully. 生成了两个文件夹 打开dist 文件 双击，然后就会发现一闪而过 我们需要打开cmd 然后再cmd 运行，如下 ps 如果我们需要双击的时候打开，你只需要在python 源文件最后面加一个 input(“”) 这样他就会一直打开了 123多文件打包：pyinstaller - 文件 ** 注意，多文件打包必须要有一个主文件（启动文件）** 下面我们来进行多文件打包 可以明显的看出，我们的主文件是app.py 我们进行 打包 1pyinstaller -D app.py Log 123456789101112E:\\Cgrain\\AdvancedTraining\\Request1688&gt;pyinstaller -D app.py 127 INFO: PyInstaller: 5.1127 INFO: Python: 3.9.8157 INFO: Platform: Windows-10-10.0.19042...10920 INFO: Building EXE from EXE-00.toc completed successfully.10925 INFO: checking COLLECT10926 INFO: Building COLLECT because COLLECT-00.toc is non existent10927 INFO: Building COLLECT COLLECT-00.toc11281 INFO: Building COLLECT COLLECT-00.toc completed successfully. 可以看出，也生成了两个文件夹，我们打开dist文件夹 一直进去，最后发现 双击发现，一闪而过，关于使用pyinstaller 打包完成之后的问题，没有什么好的办法能够制止他一闪而过，你在项目input 了他也无效，经过测试，发现了一个很好的处理方法，不在用单身二十多年的手速来进行快速截图定位错误了 处理办法，直接在项目cmd 运行，然后输入app.exe,如下 这样子不管怎么报错，他都不会自动关闭了，定位问题也变得简单了好了，今天的文章就写在这里了，如果有什么不会的可以在下面留言，谢谢大家","categories":[{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"}],"tags":[{"name":"Pyinstaller","slug":"Pyinstaller","permalink":"http://example.com/tags/Pyinstaller/"}]},{"title":"vscode+picgo插件_hexo_编写文章","slug":"vscode-picgo插件-hexo-编写文章","date":"2022-06-27T14:56:48.000Z","updated":"2022-06-28T14:31:20.419Z","comments":true,"path":"2022/06/27/vscode-picgo插件-hexo-编写文章/","link":"","permalink":"http://example.com/2022/06/27/vscode-picgo%E6%8F%92%E4%BB%B6-hexo-%E7%BC%96%E5%86%99%E6%96%87%E7%AB%A0/","excerpt":"使用Vscode+Picgo+github 存储我们博客的图 片 >>> 查看更多","text":"话不多说，效果如下： 我们是怎么搭建起来的呢？ 第一步 vscode 搜索 Picgovscode 搜索 Picgo 第二步 进入设置 第三步 配置 Github 第四步配置解释 Current 这里可以选很多，如 github，giteeBranch 分支 ，默认只有main 我也没有创建其它分支了，所以就用这个了，如果这里改了，下面所有是main 的都要改成你写的分支，建议不要改Custom Url https://cdn.jsdelivr.net/gh/cgrain1998/gitpic@main 可以表示成https://cdn.jsdelivr.net/gh/你的github用户名/仓库@分支，我这里是主blogs&#x2F;pictures&#x2F; 这里是路径，如果不想加路径就直接写一个 &#x2F;Path github用户名&#x2F;仓库名称Token 生成地址 Token 创建地址 MarkDown 语法学习 Markdown 语法学习","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://example.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"Vscode","slug":"Vscode","permalink":"http://example.com/tags/Vscode/"},{"name":"Picgo","slug":"Picgo","permalink":"http://example.com/tags/Picgo/"}]},{"title":"使用Hexo 搭建博客的第一篇文章","slug":"hello-world","date":"2022-06-26T14:19:29.521Z","updated":"2022-06-26T14:23:25.598Z","comments":true,"path":"2022/06/26/hello-world/","link":"","permalink":"http://example.com/2022/06/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start创建一个新的文件夹1hexo new page links &gt;&gt; 这会创建一个links 的文件夹，文件夹下面创建一个index.md Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server 或者 12$ hexo s More info: Server Generate static files1$ hexo generate 或者 12$ hexo g More info: Generating Deploy to remote sites1$ hexo deploy 或者 12$ hexo d More info: Deployment","categories":[{"name":"入门","slug":"入门","permalink":"http://example.com/categories/%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Python包管理","slug":"Python包管理","date":"2022-06-26T10:35:33.000Z","updated":"2022-06-26T14:23:31.779Z","comments":true,"path":"2022/06/26/Python包管理/","link":"","permalink":"http://example.com/2022/06/26/Python%E5%8C%85%E7%AE%A1%E7%90%86/","excerpt":"在Python 包文件安装的过程中，pip install 下载包很慢，我们就需要借助其他源赖进行快速下载，下面是我找到的几个能够加速Python 包下载的镜像源 >>> 查看更多","text":"在Python 包文件安装的过程中，pip install 下载包很慢，我们就需要借助其他源赖进行快速下载，下面是我找到的几个能够加速Python 包下载的镜像源 1 Python 加速下载1.1 源1.1.1 清华源12https://pypi.tuna.tsinghua.edu.cn/simple/ 1.1.2 豆瓣源12https://pypi.doubanio.com/simple/ 2 包下载12pip install -i https://pypi.doubanio.com/simple/ Django 包下载1234包卸载 pip uninstall xxx 4 包管理升级123升级pippython -m pip install --upgrade pip -i https://pypi.douban.com/simple","categories":[{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"}],"tags":[{"name":"Python包管理","slug":"Python包管理","permalink":"http://example.com/tags/Python%E5%8C%85%E7%AE%A1%E7%90%86/"}]}],"categories":[{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://example.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"入门","slug":"入门","permalink":"http://example.com/categories/%E5%85%A5%E9%97%A8/"}],"tags":[{"name":"Scrapy","slug":"Scrapy","permalink":"http://example.com/tags/Scrapy/"},{"name":"Pyinstaller","slug":"Pyinstaller","permalink":"http://example.com/tags/Pyinstaller/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"Vscode","slug":"Vscode","permalink":"http://example.com/tags/Vscode/"},{"name":"Picgo","slug":"Picgo","permalink":"http://example.com/tags/Picgo/"},{"name":"Python包管理","slug":"Python包管理","permalink":"http://example.com/tags/Python%E5%8C%85%E7%AE%A1%E7%90%86/"}]}